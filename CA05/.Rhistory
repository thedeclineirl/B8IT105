rm(list=is())
rm(list=ls())
setwd("xxx")
setwd("")
setwd("./")
data <- read.csv("Data for CI.csv", header=TRUE,sep = ",")
dpois(5,3)
ppois()
ppois(8,2)
pnorm(2,3,1.6)-pnorm(7,3,1.6)
pnorm(7,3,1.6)-pnorm(2,3,1.6)
cor(4,0)
cor(2,2)
cor()
cor(3,1)
cor(1,3)
logisticmdel.r
source('~/College/statistics/r/logisticmodel.R')
source('~/College/statistics/r/logisticmodel.R')
install.packages("glm.deploy")
source('~/College/statistics/r/logisticmodel.R')
source('~/College/statistics/r/logisticmodel.R')
source('~/College/statistics/r/logisticmodel.R')
source('~/College/statistics/r/logisticmodel.R')
source('~/College/statistics/r/logisticmodel.R')
source('~/College/statistics/r/logisticmodel.R')
data
names(data)
attach(data)
LogisticModel <- glm(MORT20~Sex+BMI,family=binomial())
summary(LogisticModel)
source('~/College/statistics/r/logisticmodel.R')
##attach(data)
##LogisticModel <- glm(MORT20~Sex+BMI,family=binomial())
LogisticModel <- glm(MORT20~BPSTAT,family=binomial())
summary(LogisticModel)
source('~/College/statistics/r/logisticmodel.R')
##attach(data)
##LogisticModel <- glm(MORT20~Sex+BMI,family=binomial())
BPSTAT <- relevel(BPSTAT,ref="Normotensive")
LogisticModel <- glm(MORT20~BPSTAT,family=binomial())
summary(LogisticModel)
LogisticModel <- glm(MORT20~BPSTAT+CHOL,family=binomial())
summary(LogisticModel)
source('~/College/statistics/r/logisticmodel.R')
View(LogisticModel)
library(swirl)
install_course_github('darrenredmond', 'R_ProgrammingDR')
swirl()
my_vector <- c(1:20)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
matrix() ?
?
?
esc
matrix(?)
? matrix()
?matrix()
?matrix
my_matrix2 <- matrix(1:20,4,5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp","rating", "test")
colnames(my_data,cnames)
colnames(my_data) <- cnames
my_data
swirl()
swirl()
swirl()
library(swirl)
swirl()
if (!require("swirl")) install.packages("swirl")
swirl()
library(swirl)
swirl()
# Get the data from the European Centre for Disease Prevention & Control with R:
#these libraries need to be loaded
library(utils)
#read the Dataset sheet into “R”. The dataset will be called "data".
data <- read.csv("https://opendata.ecdc.europa.eu/covid19/casedistribution/csv", na.strings = "", fileEncoding = "UTF-8-BOM")
summary(data)
plot(rev(subset(data, countriesAndTerritories=='Ireland')$cases))
plot(log(rev(subset(data, countriesAndTerritories=='Ireland')$cases)))
x1 = 1:10
x2 = 2:11
lm_model <- lm(y ~ x1 + x2, data=as.data.frame(cbind(y,x1,x2)))
x1 = 1:10
x2 = 2:11
lm_model <- lm(y ~ x1 + x2, data=as.data.frame(cbind(y,x1,x2)))
x1 = 1:10
x2 = 2:11
lm_model <- lm(y~x1 + x2, data=as.data.frame(cbind(y,x1,x2)))
x1 = 1:10
x2 = 2:11
lm_model <- lm(y <- x1 + x2, data=as.data.frame(cbind(y,x1,x2)))
mydata <- read.csv("https://stats.idre.ucla.edu/stat/data/binary.csv")
## view the first few rows of the data
head(mydata)
summary(mydata)
sapply(mydata, sd)
xtabs(~admit + rank, data = mydata)
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
confint(mylogit)
confint.default(mylogit)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 4:6)
l <- cbind(0, 0, 0, 1, -1, 0)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), L = l)
exp(coef(mylogit))
exp(cbind(OR = coef(mylogit), confint(mylogit)))
newdata1 <- with(mydata, data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
newdata2 <- with(mydata, data.frame(gre = rep(seq(from = 200, to = 800, length.out = 100)
newdata3 <- cbind(newdata2, predict(mylogit, newdata = newdata2, type = "link",
newdata3 <- within(newdata3, {PredictedProb <- plogis(fit), LL <- plogis(fit - (1.96 * se.fit)), UL <- plogis(fit + (1.96 * se.fit))})4), gpa = mean(gpa), rank = factor(rep(1:4, each = 100))
wssplot <- function(data, nc=15, seed=1234){
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc){
set.seed(seed)
wss[i] <- sum(kmeans(data, centers=i)$withinss)}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")}
data(wine, package="rattle")
head(wine)
install.packages('rattle')
data(wine, package="rattle")
head(wine)
install.packages('rattle'),
data(wine, package="rattle"),
head(wine)
df <- scale(wine[-1])
wssplot(df)                                                #2
library(NbClust)
set.seed(1234)
nc <- NbClust(df, min.nc=2, max.nc=15, method="kmeans")
table(nc$Best.n[1,])
install.packages('BbClust')
library(NbClust)
install.packages('NbClust')
library(NbClust)
set.seed(1234)
nc <- NbClust(df, min.nc=2, max.nc=15, method="kmeans")
table(nc$Best.n[1,])
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen by 26 Criteria")
table(nc$Best.n[1,])
set.seed(1234)
fit.km <- kmeans(df, 3, nstart=25)                           #3
fit.km$size
fit.km$centers
aggregate(wine[-1], by=list(cluster=fit.km$cluster), mean)
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen by 26 Criteria")
barplot(table(nc$Best.n[1,]),
xlab="Numer of Clusters", ylab="Number of Criteria",
main="Number of Clusters Chosen by 26 Criteria")
str(wine)
fit.km$size
fit.km <- kmeans(df, 3, nstart=25)                           #3
fit.km$size
fit.km$centers
ct.km <- table(wine$Type, fit.km$cluster)
ct.km
install.packages('flexclust')
library(flexclust)
randIndex(ct.km)
iris
head(iris)
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width", "Species")
head(iris)
# Check the result
iris
install.packages('ggvis')
library(ggvis)
iris %>% ggvis(~Sepal.Length, ~Sepal.Width, fill = ~Species) %>% layer_points()
iris %>% ggvis(~Petal.Length, ~Petal.Width, fill = ~Species) %>% layer_points()
# Overall correlation `Petal.Length` and `Petal.Width`
cor(iris$Petal.Length, iris$Petal.Width)
# Return values of `iris` levels
x=levels(iris$Species)
# Print Setosa correlation matrix
print(x[1])
cor(iris[iris$Species==x[1],1:4])
# Print Versicolor correlation matrix
print(x[2])
cor(iris[iris$Species==x[2],1:4])
# Print Virginica correlation matrix
print(x[3])
cor(iris[iris$Species==x[3],1:4])
###Naive Bayes Classification
#load mlbench library
library(mlbench)
#load HouseVotes84 dataset
data('HouseVotes84')
install.packages('mlbench')
library(mlbench)
data('HouseVotes84')
#barplots for specific issue
plot(as.factor(HouseVotes84[,2]))
title(main='Votes cast for issue', xlab='vote', ylab='# reps')
#by party
plot(as.factor(HouseVotes84[HouseVotes84$Class=='republican',2]))
title(main='Republican votes cast for issue 1', xlab='vote', ylab='# reps')
plot(as.factor(HouseVotes84[HouseVotes84$Class=='democrat',2]))
title(main='Democrat votes cast for issue 1', xlab='vote', ylab='# reps')
install.packages('MASS')
library(MASS)
data(Boston)
head(Boston)
Boston
summary(Boston)
structure(Boston)
help(Boston)
?Boston
str(Boston)
mean(Boston~rm)
mean(rm~Boston)
mean(Boston$rm)
sd(Boston$rm)
aggregate(list(Boston$chas), mean)
aggregate(d[, 3:4], list(Boston$chas), mean)
help("mtcars")
help(mtcars)
mtcars2 <- mtcars[complete.cases(mtcars)]
mtcars[complete.cases(mtcars)]
mtcars2 <- mtcars[complete.cases(mtcars),]
mtcars
str(mtcars)
str(mtcars2)
attach(mtcars)
str(mtcars)
mtcars
boxplot(qt ~ cyl)
boxplot(mtcars)
ggplot2(mtcars)
ggplot(mtcars)
library(ggplot2)
ggplots(mtcars)
library(ggplot2)
ggplots(mtcars)
ggplot2(mtcars)
boxplot(mtcars ~ cyl)
boxplot(wt ~ cyl)
str(data)
plot(data$wDay, data$cnt, col = rep(data$Year), pch = 19)
legend("topleft", legend = unique(data$Year), col = unique(data$Year), pch = 19, bty = "n")
plot(data$wDay, data$cnt, col = rep(data$Year), pch = 19)
hist(data$cnt, col=3, main="Histogram of London Bike Rentals")
data<-read.csv("london_merged.csv")
setwd("C:/Users/GBKXN/OneDrive - Bayer/Code/github/B8IT105/CA05")
data<-read.csv("london_merged.csv")
head(data)
tail(data)
summary(data)
str(data)
table(is.na(data))
mean(data$cnt)
sd(data$cnt)
min(data$cnt)
max(data$cnt)
mean(data$cnt)
sd(data$cnt)
str(data)
data$Date <- as.numeric(substr(gsub("-", "", data$timestamp), 1, 9))
# numeric categorical data for correlation
data$Year <- lubridate::year(data$timestamp)
data$Hour <- lubridate::hour(data$timestamp)
data$Day <- lubridate::day(data$timestamp)
data$wDay <- lubridate::wday(data$timestamp)
data$Month <- lubridate::month(data$timestamp)
str(data)
unique(data$Year)
unique(data$Month)
unique(data$Day)
unique(data$wDay)
unique(data$Hour)
data$timestamp <- NULL
str(data)
options(repr.plot.width=15, repr.plot.height=6)
hist(data$cnt, col=3, main="Histogram of London Bike Rentals")
scatter.smooth(data$hum,data$cnt, col=5, main="Effect of Humidity on Bike Rentals")
scatter.smooth(data$wDay,data$cnt, col=3, main="Bike Rentals by weekday")
scatter.smooth(data$Year,data$cnt, col=12, main="Bike Rentals by Year")
plot(data$wDay, data$cnt, col = rep(data$Year), pch = 19)
legend("topleft", legend = unique(data$Year), col = unique(data$Year), pch = 19, bty = "n")
ggplot(data,aes(x=cnt,fill=cnt)) + geom_area(fill="Red")
library(lubridate)
library(ggplot2)
ggplot(data,aes(x=cnt,fill=cnt)) + geom_area(fill="Red")
rlang::last_error()
ggplot(data,aes(x=cnt,y=Year,fill=cnt)) + geom_area(fill="Red")
ggplot(data,aes(x=cnt,y=wDay,fill=cnt)) + geom_area(fill="Red")
ggplot(data,aes(x=Month,y=cnt,fill=cnt)) + geom_area(fill="Green")
ggplot(data,aes(x=cnt,y=Month,fill=cnt)) + geom_area(fill="Green")
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_boxplot(fill="blue")+ggtitle("Temperature over Months")+ylab("Month")+xlab("cnt")
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_linerange(fill="blue")+ggtitle("Temperature over Months")+ylab("Month")+xlab("cnt")
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_linerange()+ggtitle("Temperature over Months")+ylab("Month")+xlab("cnt")
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_line()+ggtitle("Temperature over Months")+ylab("Month")+xlab("cnt")
?geom_bar
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_bar()+ggtitle("London Bikes usage over Months")+ylab("Month")+xlab("cnt")
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_bar()+ggtitle("London Bikes usage over Months")+ylab("Month")
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_bar()
ggplot(data,aes(x=cnt,y=Month,fill=cnt))+geom_col()+ggtitle("London Bikes usage over Months")+ylab("Month")+xlab("cnt")
ggplot(data,aes(x=Month,y=cnt,fill=cnt))+geom_col()+ggtitle("London Bikes usage over Months")+xlab("Month")+ylab("cnt")
?ylab
ggplot(data,aes(x=Month,y=cnt,fill=cnt))+geom_col()+ggtitle("London Bikes usage by Month")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Month,y=cnt,fill=wDay))+geom_col()+ggtitle("London Bikes usage by Month")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Month,y=cnt,fill=Year))+geom_col()+ggtitle("London Bikes usage by Month")+xlab("Month")+ylab("count")
tail(data)
ggplot(data,aes(x=Month,y=cnt,fill=Year))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Year,y=cnt,fill=Month))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Year,y=cnt,fill=Month))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
+scale_fill_manual(values = c("Red", "Green", "Blue","Yellow"))
ggplot(data,aes(x=Year,y=cnt,fill=Month))+geom_col(colorRamp('R'))+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Year,y=cnt,fill=Month))+geom_col(colorRamp('red'))+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Year,y=cnt,fill=Month))+geom_col(colors(distinct = TRUE))+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Year,y=cnt,fill=Month,colors(distinct = TRUE)))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Year,y=cnt,fill=Month,color='Red'))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Month,y=cnt,fill=Year,colours()))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Month,y=cnt,fill=Year,colours(distinct = TRUE)))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=Month,y=cnt,fill=Year))+geom_col()+ggtitle("London Bikes usage by Month & Year")+xlab("Month")+ylab("count")
ggplot(data,aes(x=cnt,y=Month,fill=cnt)) + geom_area(fill="Green")
plot(data$wDay, data$cnt, col = rep(data$Year), pch = 19)
legend("topleft", legend = unique(data$Year), col = unique(data$Year), pch = 19, bty = "n")
scatter.smooth(data$Year,data$cnt, col=12, main="Bike Rentals by Year")
scatter.smooth(data$wDay,data$cnt, col=3, main="Bike Rentals by weekday")
